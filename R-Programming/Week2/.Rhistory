y^2 + g(x)
}
g <- function(x) {
x * y
}
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
y
}
f(3)
y
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x * y
}
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x * y
}
g(2)
g1 <- function(x) {
a <- 3
x + a + y
}
g1(2)
y = 3
g1(2)
g1 <- function(x) {
a <- 3
x + a + y
}
g1(2)
make.NegLogLik <- function(data, fixed=c(FALSE,FALSE)) {
params <- fixed
function(p) {
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b <- -0.5*sum((data-mu)^2) / (sigma^2)
-(a + b)
}
}
set.seed(1); normals <- rnorm(100, 1, 2)
nLL <- make.NegLogLik(normals)
nLL
ls(environment(nLL))
normals
optim(c(mu = 0, sigma = 1), nLL)$par
optim(c(mu = 0, sigma = 1), nLL)
nLL <- make.NegLogLik(normals, c(1, FALSE))
x <- seq(1.7, 1.9, len = 100)
y <- sapply(x, nLL)
plot(x, exp(-(y - min(y))), type = "l")
nLL <- make.NegLogLik(normals, c(FALSE, 2))
x <- seq(0.5, 1.5, len = 100)
y <- sapply(x, nLL)
plot(x, exp(-(y - min(y))), type = "l")
nLL <- make.NegLogLik(normals, c(1, FALSE))
x <- seq(1.7, 1.9, len = 100)
y <- sapply(x, nLL)
plot(x, exp(-(y - min(y))), type = "l")
nLL <- make.NegLogLik(normals, c(FALSE, 2))
x <- seq(0.5, 1.5, len = 100)
y <- sapply(x, nLL)
plot(x, exp(-(y - min(y))), type = "l")
nLL <- make.NegLogLik(normals, c(1, FALSE))
x <- seq(1.7, 1.9, len = 100)
y <- sapply(x, nLL)
plot(x, exp(-(y - min(y))), type = "l")
x = as.Date("1970-01-01")
x
x = Sys.Date()
x
x = Sys.time()
x
x = Sys.timezone()
x
system.time()
x = Sys.time()
p = as.POSIXlt(x)
names(unclass(p))
p$wday
p$mday
p$isdst
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
swirl()
swirl
library(swirl)
swirl
install.packages("swirl")
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl
swirl()
TRUE==TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5!=7)
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
wich(ints>5)
which(ints>7)
any(ints)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2, 4, 5))
submit()
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
submit()
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Hello")
submit()
submit()
mad_libs(place="Here",adjective="adjective", noun="noun")
submit()
"I" %p% "love R!"
"I" %p% "love" %p% "R!"
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 = as.Date("1969-01-01")
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3: "October 17, 1986 08:24"
t3<- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
na_removed <- current_file[!is.na(current_file[, pollutant]), pollutant]
pollutantmean <- function(directory, pollutant, id=1:332) {
if(grep("specdata", directory) == 1) {
directory <- ("./specdata/")
}
# initialize a vector to hold the pollutant data
mean_vector <- c()
selected_files <- as.character( list.files(directory) )
file_paths <- paste(directory, selected_files, sep="")
for(i in id) {
current_file <- read.csv(file_paths[i], header=T, sep=",")
head(current_file)
pollutant
na_removed <- current_file[!is.na(current_file[, pollutant]), pollutant]
mean_vector <- c(mean_vector, na_removed)
}
mean(mean_vector)
}
source("pollutantmean.R")
getwd()
setwd("/Users/jguzman/Documents/onedrive/DataScience/gitRepo/R-Programming/Week2")
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
source("complete.R")
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
source("corr.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
lapply
x <- list(a=1:5,b=rnorm(10))
lapply(x,mean)
lapply(x,sum)
x
lapply(x,sd)
MyList <- list(A,B,C)
x
lapply(x,"[", , 2)
lapply(x,"[", , 1)
A <- matrix(3,3)
A<- sample(10)
A
class(A)
A <- matrix(1:20,nrow = 3, ncol = 3)
A <- matrix(1:10,nrow = 3, ncol = 3)
A <- matrix(1:9,nrow = 3, ncol = 3)
A
B <- matrix(1:9,nrow = 3, ncol = 3)
B
C <- matrix(1:9,nrow = 3, ncol = 2)
C <- matrix(1:6,nrow = 3, ncol = 2)
C
MyList <- list(A,B,C)
lapply(MyList,"[", , 2)
lapply(MyList,"[", , 1)
A <- matrix(sample(9),nrow = 3, ncol = 3)
A
A
A <- matrix(sample(9),nrow = 3, ncol = 3)
A
sapply(x,sd)
sapply(x,mean)
sapply(MyList,"[", , 1)
x <- matrix(rnorm(200),20,10)
apply(x,2,mean)
apply(x,1,mean)
apply(x,1,quantile,probs=c(0.25,0.75))
x
apply(x,1,quantile,probs=c(0.25,0.75))
a <- array(rnorm(2*2*10),c(2,2,10))
a
apply(a,c(1,2),mean)
rowMeans(a,dims=2)
a
x <- c(rnorm(10),runif(10),rnorm(10,1))
f <- gl(3,10)
factorv <- gl(3,10)
x
factorv
tapply(x,factorv,mean)
tapply(x,factorv,sum)
tapply(x,factorv,range)
m <- matrix(data=cbind(rnorm(30, 0), rnorm(30, 2), rnorm(30, 5)), nrow=30, ncol=3)
m
apply(m, 2, mean)
apply(m, 2, function(x) mean(x[x>0]))
sapply(1:3, function(x) mean(m[,x]))
lapply(1:3, function(x) mean(m[,x]))
sapply(1:3, function(x, y) mean(y[,x]), y=m)
x <- c(rnorm(10),runif(10),rnorm(10,1))
f <- gl(3,10)
split(x,f)
f
x
summary(x)
sd(x)
apply(x,1,sd)
apply(x,2,sd)
lapply(x,2,sd)
apply(x,2,mean)
unsplit(x,f)
apply(x,2,sd)
x
apply(x, 2, mean)
class(x)
lapply(x, 2, mean)
lapply(x,  mean)
apply(x,2,  mean)
x<-<- matrix(rnorm(30), nrow=5, ncol=6)
x<- matrix(rnorm(30), nrow=5, ncol=6)
apply(x,2,  mean)
x <- c(rnorm(10),runif(10),rnorm(10,1))
f <- gl(3,10)
split(x,f)
x
lapply(split(x,f),mean)
tapply(x,1:3,mean)
tapply(x,1,2,3,mean)
tapply(x,c(1,2,3),mean)
library(datasets)
head(airquality)
s <- split(airquality,airquality$Month)
s
library(datasets)
head(airquality)
s <- split(airquality,airquality$Month)
lapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")],na.rm = TRUE))
x <- rnorm(10)
f1 <- gl(2,5)
f1 <- gl(5,2)
f1 <- gl(2,5)
f2 <- gl(2,5)
f1
f2
x <- rnorm(10)
f1 <- gl(2,5)
f2 <- gl(5,2)
f1
f2
interaction(f1,f2)
str(split(x,list(f1,f2)))
str(split(x,list(f1,f2),drop = TRUE))
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(matrix)
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags,unique)
unique_vals
a
lapply(flags,sum)
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary
)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
iris
head(iris)
tapply(iris$Sepal.Length,iris$Species,mean)
apply(iris, 2, mean)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
head(mtcars)
tapply(mtcars$mpg,mtcars$cyl,mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(mpg, cyl, mean))
lapply(mtcars, mean)
sapply(mtcars, cyl, mean)
apply(mtcars, 2, mean)
new <- tapply(mtcars$hp, mtcars$cyl, mean)
new
round(abs(new[3]-new[1]))
debug(ls)
ls()
ls()
if (inherits(pos, "error")) {
if (inherits(pos, "error")) {
function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE,
pattern, sorted = TRUE)
{
if (!missing(name)) {
pos <- tryCatch(name, error = function(e) e)
if (inherits(pos, "error")) {
name <- substitute(name)
if (!is.character(name))
name <- deparse(name)
warning(gettextf("%s converted to character string",
sQuote(name)), domain = NA)
pos <- name
}
}
all.names <- .Internal(ls(envir, all.names, sorted))
if (!missing(pattern)) {
if ((ll <- length(grep("[", pattern, fixed = TRUE))) &&
ll != length(grep("]", pattern, fixed = TRUE))) {
if (pattern == "[") {
pattern <- "\\["
warning("replaced regular expression pattern '[' by  '\\\\['")
}
else if (length(grep("[^\\\\]\\[<-", pattern))) {
pattern <- sub("\\[<-", "\\\\\\[<-", pattern)
warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
}
}
grep(pattern, all.names, value = TRUE)
}
else all.names
}
debug(ls)Q
Q
q
c
